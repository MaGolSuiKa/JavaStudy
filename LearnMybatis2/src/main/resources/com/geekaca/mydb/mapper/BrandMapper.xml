<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--
    namespace:名称空间
-->

<mapper namespace="com.geekaca.mydb.mapper.BrandMapper">

    <!--
        数据库表的字段名称  和  实体类的属性名称 不一样，则不能自动封装数据
            * 起别名：对不一样的列名起别名，让别名和实体类的属性名一样
                * 缺点：每次查询都要定义一次别名
                    * sql片段
                        * 缺点：不灵活
            * resultMap：
                1. 定义<resultMap>标签
                2. 在<select>标签中，使用resultMap属性替换 resultType属性

    -->
    <!--
        id：唯一标识
        type：映射的类型，支持别名
        goods_id, title, price
    -->
    <resultMap id="brandResultMap" type="com.geekaca.mydb.pojo.Brand">
        <!--
            id：完成主键字段的映射
                column：表的列名
                property：实体类的属性名
            result：完成一般字段的映射
                column：表的列名
                property：实体类的属性名
        -->
        <result column="goods_id" property="goodsId"/>
        <result column="title" property="goodsTitle"/>
        <result column="price" property="goodsPrice"/>
    </resultMap>
    <insert id="insertBrand">
        insert into tb_goods(title, price)
            value (#{goodsTitle},#{goodsPrice});
    </insert>

    <select id="selectBy" resultMap="brandResultMap">
        select *
        from tb_goods
        where title like concat('%', #{goodsTitle}, '%');
    </select>

    <select id="selectByConditionDynamic" resultMap="brandResultMap" parameterType="Brand">
        select * from tb_goods
        <where>
            <if test="goodsTitle != null and goodsTitle != 'pass'">
                and title like concat('%',#{goodsTitle},'%')
            </if>
            <if test="goodsPrice != 0">
                and price = goodsPrice
            </if>
            <if test="goodsTitle = 'pass' and goodsPrice = 0">
                and goods_id > 0
            </if>
        </where>
    </select>

</mapper>